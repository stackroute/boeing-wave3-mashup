{
  "_from": "ngx-monaco-editor@^6.0.0",
  "_id": "ngx-monaco-editor@6.0.0",
  "_inBundle": false,
  "_integrity": "sha512-sgNZblVUsIYHaWIKUqHopX3+rDL3DsjH9nsQoCuD7aA4p7Oppmd7UXwyT8OYTmimfcoufiA0tiIcH41XCZW58w==",
  "_location": "/ngx-monaco-editor",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngx-monaco-editor",
    "fetchSpec": "^6.0.0",
    "name": "ngx-monaco-editor",
    "raw": "ngx-monaco-editor@^6.0.0",
    "rawSpec": "^6.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-monaco-editor/-/ngx-monaco-editor-6.0.0.tgz",
  "_shasum": "c427c9a3d6dcd91b8e51a47d6cb3f7b7df899de5",
  "_spec": "ngx-monaco-editor@^6.0.0",
  "_where": "/home/user/Pictures/AngularJwtAuth",
  "author": {
    "name": "Atul Kumar"
  },
  "bugs": {
    "url": "https://github.com/atularen/ngx-monaco-editor/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Atul Kumar",
      "email": "atulaggarwal4288@gmail.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Monaco Code Editor for Angular",
  "devDependencies": {},
  "homepage": "https://github.com/atularen/ngx-monaco-editor#readme",
  "keywords": [
    "angular",
    "angular 2",
    "angular 4",
    "angular 5",
    "code",
    "editor",
    "monaco",
    "monaco-editor",
    "reusable"
  ],
  "license": "MIT",
  "main": "./editor.umd.js",
  "module": "./index.js",
  "name": "ngx-monaco-editor",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">= 2.0.0",
    "@angular/core": ">= 2.0.0"
  },
  "private": false,
  "readme": "# Monaco Editor Component for Angular 2 and above.\n\n - Angular <= 4: v3.x.x\n - Angular 5: v5.x.x\n - Angular 6: v6.x.x\n\nUsing this Module you can utilize the Monaco Editor as an Angular Component. Feel free to contribute, raise feature requests and make it better.\n\nSupports all the options available in monaco-editor [Monaco Editor Options](https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html)\n\n## Setup\n\n### Installation\n\nInstall from npm repository:\n```\nnpm install ngx-monaco-editor --save\n ```\n \nFor angular version 5 use v5.x.x\n```\nnpm install ngx-monaco-editor@5.0.0 --save\n ```\n \nAdd the glob to assets in .angular-cli.json (to make monaco-editor lib available to the app):\n```typescript\n{\n  \"apps\": [\n    {\n      \"assets\": [\n        { \"glob\": \"**/*\", \"input\": \"../node_modules/ngx-monaco-editor/assets/monaco\", \"output\": \"./assets/monaco/\" }\n      ],\n      ...\n    }\n    ...\n  ],\n  ...\n}\n ```\n\n### Sample\nInclude MonacoEditorModule in Main Module and Feature Modules where you want to use the editor component.(eg: app.module.ts): \n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MonacoEditorModule } from 'ngx-monaco-editor';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    MonacoEditorModule.forRoot() // use forRoot() in main app module only.\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n\nCreate Editor options in component.(eg: app.component.ts)\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  editorOptions = {theme: 'vs-dark', language: 'javascript'};\n  code: string= 'function x() {\\nconsole.log(\"Hello world!\");\\n}';\n}\n```\nInclude editor in html with options and ngModel bindings.(eg: app.component.html)\n```html\n<ngx-monaco-editor [options]=\"editorOptions\" [(ngModel)]=\"code\"></ngx-monaco-editor>\n```\n\nInclude diff-editor in html with options.(eg: app.component.html)\n```html\n<ngx-monaco-diff-editor [options]=\"options\" [originalModel]=\"originalModel\" [modifiedModel]=\"modifiedModel\"></ngx-monaco-diff-editor>\n```\n```typescript\nimport { Component } from '@angular/core';\nimport { DiffEditorModel } from 'ngx-monaco-editor';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  options = {\n    theme: 'vs-dark'\n  };\n  originalModel: DiffEditorModel = {\n    code: 'heLLo world!',\n    language: 'text/plain'\n  };\n\n  modifiedModel: DiffEditorModel = {\n    code: 'hello orlando!',\n    language: 'text/plain'\n  };\n}\n```\n\n### Styling\nAdd class to editor tag. (eg. class=\"my-code-editor\")\n```html\n<ngx-monaco-editor class=\"my-code-editor\" [options]=\"editorOptions\" [(ngModel)]=\"code\"></ngx-monaco-editor>\n```\nAdd styling in css/scss file:\n```scss\n.my-code-editor {\n  .editorContainer {\n    height: calc(100vh - 100px);\n  }\n}\n```\nSet automaticLayout option to adjust editor size dynamically. Recommended when using in modal dialog or tabs where editor is not visible initially.\n\n### Events\nOutput event (onInit) expose editor instance that can be used for performing custom operations on the editor. \n```html\n<ngx-monaco-editor [options]=\"editorOptions\" [(ngModel)]=\"code\" (onInit)=\"onInit($event)\"></ngx-monaco-editor>\n```\n\n```typescript\nexport class AppComponent {\n  editorOptions = {theme: 'vs-dark', language: 'javascript'};\n  code: string= 'function x() {\\nconsole.log(\"Hello world!\");\\n}';\n  onInit(editor) {\n      let line = editor.getPosition();\n      console.log(line);\n    }\n}\n```\n\n## Configurations\n`forRoot()` method of MonacoEditorModule accepts config of type `NgxMonacoEditorConfig`.\n```typescript\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { MonacoEditorModule, NgxMonacoEditorConfig } from 'ngx-monaco-editor';\nimport { AppComponent } from './app.component';\n\nconst monacoConfig: NgxMonacoEditorConfig = {\n  baseUrl: 'app-name/assets', // configure base path for monaco editor\n  defaultOptions: { scrollBeyondLastLine: false }, // pass default options to be used\n  onMonacoLoad: () => { console.log((<any>window).monaco); } // here monaco object will be available as window.monaco use this function to extend monaco editor functionality.\n};\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    MonacoEditorModule.forRoot(monacoConfig)\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n\n### Configure JSON Defaults\n`onMonacoLoad` property of `NgxMonacoEditorConfig` can be used to configure JSON default.\n```typescript\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { MonacoEditorModule, NgxMonacoEditorConfig } from 'ngx-monaco-editor';\nimport { AppComponent } from './app.component';\n\nconst monacoConfig: NgxMonacoEditorConfig = {\n  onMonacoLoad: () => { \n    const id = \"foo.json\";\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemas: [{\n        uri: \"http://myserver/foo-schema.json\",\n        fileMatch: [id],\n        schema: {\n          type: \"object\",\n          properties: {\n            p1: {\n              enum: [ \"v1\", \"v2\"]\n            },\n            p2: {\n              $ref: \"http://myserver/bar-schema.json\"\n            }\n          }\n        }\n      },{\n        uri: \"http://myserver/bar-schema.json\",\n        fileMatch: [id],\n        schema: {\n          type: \"object\",\n          properties: {\n            q1: {\n              enum: [ \"x1\", \"x2\"]\n            }\n          }\n        }\n      }]\n    });\n  } \n};\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    MonacoEditorModule.forRoot(monacoConfig)\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n\nNow pass model config of type `NgxEditorModel` to Editor Component\n```typescript\n@Component({\n  selector: 'app-root',\n  template: `<ngx-monaco-editor [options]=\"options\" [model]=\"model\"></ngx-monaco-editor>`,\n  styles: []\n})\nexport class AppComponent {\n  options = {\n    theme: 'vs-dark'\n  };\n  \n  jsonCode = [\n    '{',\n    '    \"p1\": \"v3\",',\n    '    \"p2\": false',\n    '}'\n  ].join('\\n');\n\n  model: NgxEditorModel = {\n    value: this.jsonCode,\n    language: 'json',\n    uri: 'foo.json'\n  };\n}\n```\n\n## Links\n[Monaco Editor](https://github.com/Microsoft/monaco-editor/)<br/>\n[Monaco Editor Options](https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html)\n\n## License\n\nMIT Â© [Atul Kumar](https://github.com/atularen)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atularen/ngx-monaco-editor.git"
  },
  "scripts": {},
  "typings": "./index.d.ts",
  "version": "6.0.0"
}
